package launchers;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.HtmlPage;

import utilities.OutFile;
import utilities.State;

public class ElectionScraper
{
	private State state;
	private OutFile out = null;
	
	public ElectionScraper(State _state)
	{
		this.state = _state;
	}
	
	public void run() //TODO want to return anything for ScrapeAndParse to post-process?
	{
		System.out.println(this.state.getState() + ": scraping");
		
		Logger.getLogger("com.gargoylesoftware").setLevel(Level.OFF);
		//final WebClient wc = new WebClient(BrowserVersion.FIREFOX_38);
		//HtmlPage page = null;
		
		if (state.getYears().length != 0)
		{
			for (int year : this.state.getYears())
			{
				System.out.print("\t" + year);
				
				if (state.getOffices().length != 0)
					this.offices(year);
				else if (state.getLocations().length != 0)
					this.locations(year);
				else
					System.err.println("Not enough info to scrape this state/ year");
			}
		}
		else
			System.err.println("Not enough info to scrape this state/ year.");
	}
	
	private void offices(int year)
	{
		System.out.println(": scraping by office");
		
		String outPath = state.getPath() + "\\" + year + "_" + state.getGeoType() + ".txt";
		OutFile out = null;
		
		try
		{
			out = new OutFile(outPath, false);
		}
		catch (IOException e)
		{
			System.err.println("Error in setting up output file " + outPath);
			e.printStackTrace();
		}
		
		for (String office : state.getOffices())
		{
			System.out.println("\t\t" + office);
		}
	}
	
	private void locations(int year)
	{
		System.out.println(": scraping by location");
		for (String location : state.getLocations())
			System.out.println("\t\t" + location);
	}
}
